<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Assignment</title>
  <link rel="stylesheet" type="text/css" href="/css/bootstrap.min.css" />
  <link rel="stylesheet" type="text/css" href="/font/bootstrap-icons.css">
  <%- include('partials/favico') %>
  <script>
    // Holds what the attendance looked like from the database
    // Used to see if we have made any changes
    let currentAttendance = new Map();

    // Holds the current attendance that we have changed before submiting them to the database
    let workingAttendance = new Map();

    // Start day of the week, 0 = Sunday, 1 = Monday, 2 = Tuesday
    const startDay = 0;

    /**
     * // https://stackoverflow.com/questions/35948335/how-can-i-check-if-two-map-objects-are-equal
     * @param {Map} map1
     * @param {Map} map2
     */
    function compareMaps(map1, map2) {
      let testVal;
      if (map1.size !== map2.size) {
        return false;
      }
      for (let [key, val] of map1) {
        testVal = map2.get(key);
        // in cases of an undefined value, make sure the key
        // actually exists on the object so there are no false positives
        if (testVal !== val || (testVal === undefined && !map2.has(key))) {
          return false;
        }
      }
      return true;
    }


    // Set the date pickers date to today
    function loadStartDate() {
      // Check for URL parmas, and if they exist use thoses
      let datePicker = document.getElementById("datePicker");

      const urlParams = new URLSearchParams(window.location.search);
      let selectedDate = urlParams.get("date");
      if (selectedDate != undefined || selectedDate != null) {
        datePicker.valueAsDate = new Date(selectedDate);
      } else {
        let date = new Date();
        datePicker.valueAsDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));
      }
    }


    // Set the meal picker if we have params
    function loadGroupPicker() {
      // Check for URL parmas, and if they exist use thoses
      let groupPicker = document.getElementById("groupPicker");
      const urlParams = new URLSearchParams(window.location.search);
      let groupTime = urlParams.get("class_time_id");
      if (groupTime != undefined || groupTime != null) {
        groupPicker.value = groupTime;
      }
    }

    function showModal() {
      const urlParams = new URLSearchParams(window.location.search);
      let save = urlParams.get("save");
      if (save != undefined || save != null) {
        if (Number(save) == 1) {
          const urlParams = new URLSearchParams(window.location.search);
          urlParams.delete("save");

          window.history.replaceState(null, null, "?" + urlParams.toString());
          var myModal = new bootstrap.Modal(document.getElementById("myModal"), {});
          myModal.show();
        }
      }
    }


    // Load the students into the table
    async function loadAttendance() {

      // Store the date
      let date = document.getElementById("datePicker");

      // Store the group id
      let groupId = document.getElementById("groupPicker");

      // If both values are not filled exit
      if (date == null || date == undefined || groupId == undefined || groupId == null) {
        return;
      }

      // For each student
      let promiseStudents = new Promise((resolve, reject) => {
        // Create an AJAX request to get the students
        let xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function() {
          if (this.readyState == 4 && this.status == 200) {
            let feedings = JSON.parse(this.responseText);
            resolve(feedings);
          }
        };

        // Add the date the the url
        let url = new URL("students", window.location.href + window.location.pathname);
        let params = new URLSearchParams(url.search);
        params.append("class_time_id", groupId.value);

        // Find the start day of the week
        let startDate = new Date(getStartOfWeek(date.value));
        let endDate = new Date(startDate);
        endDate.setDate(endDate.getDate() + 6);

        params.append("startDate", startDate.toISOString().slice(0, 10));
        params.append("endDate", endDate.toISOString().slice(0, 10));


        url.search = params;
        xhttp.open("GET", url, true);
        xhttp.send();
      });

      // Wait for the students
      let students = new Array();
      await Promise.all([promiseStudents]).then((values) => {
        students = values[0];
      });

      // Now that we have the students see if any of them have attendance
      // Delete all current rows
      let tableBody = document.getElementById("attendance-table-body");
      while (tableBody.firstChild) {
        tableBody.removeChild(tableBody.firstChild);
      }

      // Add the rows and reset the current feedings
      currentAttendance = new Map();
      students.forEach(student => {
        if (student.is_present != null) {
          tableBody.appendChild(
            createTableRow(student.student_id, student.first_name, student.last_name, student.is_present)
          );
          currentAttendance.set(student.student_id, student.is_present);
        } else {
          tableBody.appendChild(
            createTableRow(student.student_id, student.first_name, student.last_name, null)
          );
        }

      });

      // Now set the working set to the current set
      workingAttendance = new Map(currentAttendance);

      // Add event listeners
      addEventListenersToAttendance();
    }


    function addEventListenersToAttendance() {
      const clicked = function(e) {
        let input = document.getElementById(this.getAttribute("for"));
        // If input was clicked for a second time set its value to false
        let bClickedAgain = false;
        if (input.checked == true) {
          bClickedAgain = true;
        }

        // Get the name of the input
        let studentId = input.getAttribute("data-student-id");
        let name = "options-outlined[" + studentId + "]";

        // Set all other inputs to false, so there can only be one clicked
        let inputs = document.querySelectorAll(`input[name="${name}"]`);

        inputs.forEach(function(element, index) {
          if (element.getAttribute("id").localeCompare(input.getAttribute("id")) != 0) {
            this[index].checked = false;
          }
          // If we clicked on a different input set it to true else set it to false
          else if (bClickedAgain == false) {
            this[index].checked = true;
          } else {
            this[index].checked = false;
          }
        }, inputs); // use inputs as this

        e.preventDefault();

        // Since we are chaning the values through code we need to fire their on change event
        const ev = new Event("change");
        input.dispatchEvent(ev);
      };

      const lockDateAndGroupPicker = function(e) {
        // If currentFeeds is equal to workingFeedings unlock else lock
        let bIsEqual = compareMaps(currentAttendance, workingAttendance);

        let date = document.getElementById("datePicker");
        let group = document.getElementById("groupPicker");

        // They are the same
        if (bIsEqual) {
          date.disabled = false;
          group.disabled = false;
          for (let element of [date, group]) {
            element.removeAttribute("data-bs-toggle");
            element.removeAttribute("title");
          }
        }
        // They are different
        else {
          date.disabled = true;
          group.disabled = true;
          for (let element of [date, group]) {
            element.setAttribute("data-bs-toggle", "tooltip");
            element.setAttribute("title", "Save / Cancel before changing the date");
          }
        }
      }

      const updateWorkingAttendance = function(e) {
        let name = e.target.getAttribute("name");
        let studentId = e.target.getAttribute("data-student-id");

        // Get the check input, or undefined if not value is clicked
        let input = document.querySelector(`input[name="${name}"]:checked`);

        if (input == undefined) {
          workingAttendance.delete(Number(studentId));
        } else {
          workingAttendance.set(Number(studentId), Number(input.value));
        }
      };


      // Add event listener to all feedings
      let elements = document.querySelectorAll(".attendance-button");
      for (let i = 0; i < elements.length; i++) {
        // If clicked add it to the list
        elements[i].addEventListener("click", clicked);
        let input = document.getElementById(elements[i].getAttribute("for"));

        // Update feedings needs to come before updating the lock, since the lock takes the workding feeds value
        input.addEventListener("change", updateWorkingAttendance);
        input.addEventListener("change", lockDateAndGroupPicker);
      }
    }

    function createTableRow(student_id, first_name, last_name, did_attend) {
      let tr = document.createElement("tr");

      // Add name
      let td_name = document.createElement("td");
      td_name.innerText = first_name + " " + last_name;
      tr.appendChild(td_name);

      // Add buttons
      let td_feed = document.createElement("td");
      td_feed.appendChild(createSuccessButton(student_id, did_attend));
      td_feed.appendChild(createSuccessLabel(student_id, did_attend));
      td_feed.appendChild(createDangerButton(student_id, did_attend));
      td_feed.appendChild(createDangerLabel(student_id, did_attend));

      tr.appendChild(td_feed);
      return tr;
    }

    function createSuccessButton(student_id, is_feed) {
      let input_success = document.createElement("input");
      input_success.setAttribute("type", "checkbox");
      input_success.setAttribute("name", "options-outlined[" + student_id + "]");
      input_success.setAttribute("id", "success-outlined-" + student_id);
      input_success.setAttribute("data-student-id", student_id);
      input_success.setAttribute("value", 1);


      input_success.setAttribute("autocomplete", "off");
      input_success.classList.add("btn-check");
      if (is_feed != null) {
        if (is_feed == "1") {
          input_success.checked = true;
        }
      }
      return input_success;
    }

    function createSuccessLabel(student_id, is_feed) {
      let input_success_label = document.createElement("label");
      input_success_label.setAttribute("for", "success-outlined-" + student_id);
      input_success_label.classList.add(
        "btn",
        "btn-outline-success",
        "attendance-button",
        "me-1"
      );

      let i_check = document.createElement("i");
      i_check.classList.add("bi", "bi-check-square-fill");

      input_success_label.appendChild(i_check);
      return input_success_label;
    }

    function createDangerButton(student_id, is_feed) {
      let input_danger = document.createElement("input");
      input_danger.setAttribute("type", "checkbox");
      input_danger.setAttribute("name", "options-outlined[" + student_id + "]");
      input_danger.setAttribute("id", "danger-outlined-" + student_id);
      input_danger.setAttribute("autocomplete", "off");
      input_danger.setAttribute("data-student-id", student_id);
      input_danger.classList.add("btn-check");
      input_danger.setAttribute("value", 0);

      if (is_feed != null) {
        if (is_feed == "0") {
          input_danger.checked = true;
        }
      }
      return input_danger;
    }

    function createDangerLabel(student_id, is_feed) {
      let input_danger_label = document.createElement("label");
      input_danger_label.setAttribute("for", "danger-outlined-" + student_id);
      input_danger_label.classList.add(
        "btn",
        "btn-outline-danger",
        "attendance-button",
        "ms-1"
      );

      let i_check = document.createElement("i");
      i_check.classList.add("bi", "bi-x-square-fill");

      input_danger_label.appendChild(i_check);
      return input_danger_label;
    }

    // Reset all feeding to the current feedings
    function clearAttendance() {
      let elements = document.querySelectorAll(".attendance-button");
      for (let i = 0; i < elements.length; i++) {
        // If clicked add it to the list
        let input = document.getElementById(elements[i].getAttribute("for"));
        let studentId = input.getAttribute("data-student-id");

        // Find the corresponding student id in the map 
        let feedingValue = currentAttendance.get(Number(studentId));

        // That means we did NOT find it in the map
        if (input.value == feedingValue) {
          input.checked = true;
        } else {
          input.checked = false;
        }

        // Since we are chaning the values through code we need to fire their on change event
        const ev = new Event("change");
        input.dispatchEvent(ev);
      }
    }


    // Get the start day of the week
    function getStartOfWeek(d) {
      let dateParts = d.split('-')
      let newDate = new Date(Number(dateParts[0]), Number(dateParts[1]) - 1, Number(dateParts[2]));

      let date = new Date();

      // Get the day: Sunday - Saturday : 0 - 6
      let day = newDate.getDay();
      let difference = newDate.getDate() - day;

      let returnDate = new Date(newDate.setDate(difference + startDay))
      return returnDate;
    }

    // Submit the form
    function submitAttendance(e) {

      // Add the working Map as an array to the form
      // So that we can send the student ids to the server
      let form = document.getElementById("form");

      // Enable the Date/Meal pickers so there data is added
      let date = document.getElementById("datePicker");
      let group = document.getElementById("groupPicker");

      date.disabled = false;
      group.disabled = false;

      if (workingAttendance.size > 0) {
        for (const [key, value] of workingAttendance) {
          addHiddenInputToForm("student-id", key);
        }
      }

      // Add the class ID from the url
      const urlParams = new URLSearchParams(window.location.search);
      addHiddenInputToForm("classId", urlParams.get('classId'));

      // Find the start day of the week
      let startDate = new Date(getStartOfWeek(date.value));
      let endDate = new Date(startDate);
      endDate.setDate(endDate.getDate() + 6);

      addHiddenInputToForm("startDate", startDate.toISOString().slice(0, 10));
      addHiddenInputToForm("endDate", endDate.toISOString().slice(0, 10));

      return true;
    }

    function addHiddenInputToForm(name, value) {
      const input = document.createElement("input");
      input.setAttribute("type", "hidden");
      input.setAttribute("value", value); // This lets us save the students id
      input.setAttribute("name", name);
      form.appendChild(input);
    }
  </script>
</head>

<body onload="loadStartDate(); loadGroupPicker(); loadAttendance(); showModal();">
  <div class="container-fluid vh-100" style="margin-top:10px">
    <div class="" style="margin-top:100px">
      <div class="rounded d-flex justify-content-center">
        <div class="col-md-8 col-sm-12 shadow-lg p-5 bg-light">
          <div style="text-align:center">
            <h1>Attendance</h1>
          </div>
          <h3 style="text-align: center;"><%= locals.subject_name + " " + locals.level_name%></h3>
          <form id="form" class="" action="/attendance/insertAttendance" method="post" onsubmit="submitAttendance(event)">
            <div class="d-flex flex-row align-content-center justify-content-center">
              <div class="inline me-1">
                <input type="date" id="datePicker" class="form-control" name="attendance-date" min="1970-01-01" max="9999-12-31" onchange="loadAttendance()">
              </div>
              <div class="inline ms-1">
                <select type="select" id="groupPicker" class="form-select" name="group-time" onchange="loadAttendance()">
                  <%if(locals.groups != undefined || locals.groups != null) {
                      // Get the max length and add spaces for difference
                      groups.forEach(group => {

                        let startTime = new Date();
                        let timeParts = group.start_time.split(":");
                        startTime.setHours(timeParts[0]);
                        startTime.setMinutes(timeParts[1]);
                        startTime.setSeconds(timeParts[2]);
                        
                        let endTime = new Date();
                        timeParts = group.end_time.split(":");
                        endTime.setHours(timeParts[0]);
                        endTime.setMinutes(timeParts[1]);
                        endTime.setSeconds(timeParts[2]);
                      %>
                  <option value="<%=group.class_time_id%>"><%=(Number(group.group)+1) + ": " + group.name + " " + startTime.toLocaleTimeString() + " - " + endTime.toLocaleTimeString()%></option>
                  <%});
                  }%>
                </select>
              </div>
            </div>
            <table class="table table-striped table-hover table-sm">
              <thead>
                <tr>
                  <th scope="col">Name</th>
                  <th scope="col">
                    <span>Meal</span>
                  </th>
                </tr>
              </thead>
              <tbody id="attendance-table-body">
              </tbody>
            </table>
            <div class="d-flex justify-content-end align-items-center">
              <div class="d-inline"> <input type="button" value="Cancel" class="btn btn-secondary me-1" onclick="clearAttendance()">
              </div>
              <div class="d-inline"> <input type="submit" value="Save" class="btn btn-primary ms-1">
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
  <!-- Modal -->
  <div class="modal fade" tabindex="-1" id="myModal">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Saved</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <p>Saved attendance.</p>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        </div>
      </div>
    </div>
  </div>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ENjdO4Dr2bkBIFxQpeoTz1HIcje39Wm4jDKdf19U8gI4ddQ3GYNS7NTKfAdVQSZe" crossorigin="anonymous"></script>
</body>

</html>