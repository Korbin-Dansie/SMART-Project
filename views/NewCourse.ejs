<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>S. M. A. R. T. New Course</title>
  <link rel="stylesheet" type="text/css" href="/css/bootstrap.min.css" />
  <link rel="stylesheet" type="text/css" href="/font/bootstrap-icons.css" />
  <%- include('partials/favico') %>
</head>

<style>
  td>button:hover>i {
    color: rgba(var(--bs-light-rgb), var(--bs-text-opacity)) !important;
    ;
  }
</style>

<script>
  const semesters = <%- JSON.stringify(locals.semesters) %>;
  const classes = <%- JSON.stringify(locals.classes) %>;
  const days = <%- JSON.stringify(locals.days) %>;

  // Update the levels based on the class levels ofered
  function updateSelectClassLevel(selectedObject) {
    const value = selectedObject.value;

    // Fill in the levels with all avaible class levels
    let levelsObj = document.getElementById("classLevel");

    // Remove all elements
    for (let i = levelsObj.options.length; i >= 0; i--) {
      levelsObj.remove(i);
    }

    // Add elements
    let classLevels = new Array()
    classes.forEach(element => {
      if (element.subject_name_id == value) {
        classLevels.push(element);
      }
    });

    // Sort the objs so they are in asc order
    classLevels.sort((a, b) => {
      if (a.level_id > b.level_id) {
        return 1;
      } else {
        return -1;
      }
    });

    console.log(classLevels);
    // Now add the elements
    classLevels.forEach(element => {
      let option = document.createElement("option");
      option.value = element.subject_id;
      option.text = element.level_name;
      levelsObj.add(option);
    });

    // Enable levels
    levelsObj.removeAttribute('disabled');
  }

  // Update the displayed start and end dates of the semester
  function updateStartAndEndDates(selectedObject) {
    const value = selectedObject.value;
    let startObj = document.getElementById("start-date");
    let endObj = document.getElementById("end-date");

    // Find the selected semester
    const found = semesters.find(element => element.semester_id == value);

    startObj.innerHTML = getFormattedDate(new Date(found.start_date));
    endObj.innerHTML = getFormattedDate(new Date(found.end_date));
  }

  // https://stackoverflow.com/questions/11591854/format-date-to-mm-dd-yyyy-in-javascript
  function getFormattedDate(date) {

    let year = date.getFullYear();
    let month = (1 + date.getMonth()).toString().padStart(2, '0');
    let day = date.getDate().toString().padStart(2, '0');

    return day + '/' + month + '/' + year;
  }

  // Add an alternate time a student could come to class
  function addGroup(selectedObject){

  }

  // Delete the selected alternate time
  // If its the last on in the meeting delete the meeeting also, unless its the last one
  function deleteGroup(selectedObject){
// 
  }

  // Add a new meeting
  function addMeeting(){
    let location = document.getElementById("meeting-location");

    location.appendChild(createMeetingTable());
    location.appendChild(createMeetingTable());

  }

  function createMeetingTable(){
    const startDiv = document.createElement("div");
    startDiv.classList.add("row"); 
    startDiv.classList.add("mt-4"); 
    startDiv.classList.add("d-flex"); 
    startDiv.classList.add("course-meeting");
        
    // Get the amount of course-meetings
    const meetingNumber = document.getElementsByClassName("course-meeting").length;
    startDiv.setAttribute("data-meeting", meetingNumber);     

    const paddingDiv = document.createElement("div");
    paddingDiv.classList.add("col-md-10", "mx-auto");
    startDiv.appendChild(paddingDiv);

    // Create Label
    const label  = document.createElement("p");
    label.innerText = "Meeting " + meetingNumber + ":";
    paddingDiv.appendChild(label);

    // Create Table
    const table = document.createElement("table");
    table.classList.add("table", "table-striped", "table-sm");
    
    // Add table headers
    table.appendChild(addTableHeader());

    // Add table Body
    table.appendChild(addTableBody());
    // Add Table Body

    paddingDiv.appendChild(table);
    // End of table

    // Add Ending Row
    // End of Ending Row
    return startDiv;
  }

  function addTableHeader(){
    const thead = document.createElement("thead");
    const headerRow = document.createElement("tr");

    const tableColums = 4;
    for (let index = 0; index < tableColums; index++) {
      const th = document.createElement("th");
      th.classList.add("col");
      switch(index){
        case 0:
          th.innerText = "Day";
          break;
          case 1:
            th.innerText = "Start Time";
            break;

            case 2: 
            th.innerText = "End Time";
            break;

            case 3: 
            th.innerText = "Delete";
            break;
      }
      headerRow.appendChild(th);
    }
    thead.append(headerRow);
    return thead;
  }
</script>

<body onload="addMeeting();">
  <div class="container-fluid vh-100" style="margin-top:10px">
    <div class="" style="margin-top:100px">
      <div class="rounded d-flex justify-content-center">
        <div class="col-md-4 col-sm-12 shadow-lg p-2 bg-light">
          <a href="InstructorDashboard" class="btn btn-secondary mt-2 position-relative top-0 start-0">Back</a>

          <div class="text-center">
            <h3 class="text-primary">Create New Course</h3>
          </div>
          <form method="post" action="" onSubmit="">

            <div class="row pt-4">
              <div class="col-md-10 mx-auto">

                <!--Class semesters-->
                <div class="input-group mt-4">
                  <select class="form-select" name="classSubject" id="classSubject" onchange="updateStartAndEndDates(this)">
                    <option value="" selected disabled hidden>Semesters</option>
                    <% 
                        if(locals.semesters != null){
                            locals.semesters.forEach(semester => {
                     %>
                    <option value="<%=semester.semester_id%>">
                      <%=semester.description%>
                    </option>
                    <%
                    });
                        };
                     %>
                  </select>
                </div>

                <!-- Start and end dates-->
                <div class="row mt-4">
                  <div class="col-6">
                    <!--Start Time-->
                    <div>
                      <label>Start Date:</label>
                      <div class="input-group mb-3">
                        <p class="form-control user-select-none bg-light" id="start-date">dd/mm/yyyy</p>
                      </div>
                    </div>
                  </div>
                  <div class="col-6">
                    <!--End Date-->
                    <div>
                      <label>End Date:</label>
                      <div class="input-group mb-3">
                        <p class="form-control user-select-none bg-light" id="end-date">dd/mm/yyyy</p>
                      </div>
                    </div>
                  </div>
                </div>

                <!--Class Subject-->
                <div class="input-group mt-4">
                  <select class="form-select" name="classSubject" id="classSubject" onchange="updateSelectClassLevel(this)">
                    <option value="" selected disabled hidden>Class Subject</option>
                    <% 
                        if(locals.classes != null){

                            // Load the classes into a set to get distinct values
                            const nameSet = new Set();
                            locals.classes.forEach(element => {

                                // Ifs its already in the set do nothing
                                if(nameSet.has(element.subject_name)){
                                    return; // The same as continue for foreach loop
                                }
                                else{
                                    nameSet.add(element.subject_name);
                                }
                     %>
                    <option value="<%= element.subject_name_id%>">
                      <%=element.subject_name%>
                    </option>
                    <%
                    });
                        };
                     %>
                  </select>
                </div>

                <!--Class Level-->
                <div class="input-group mt-4 mb-3">
                  <select class="form-select" name="classLevel" id="classLevel" disabled>
                    <option value="" selected disabled hidden>Class Level</option>
                  </select>
                </div>
              </div>
            </div>


            <!-- Create Groupings -->
            <div class="row mt-4 d-flex course-meeting" data-meeting="0">
              <div class="col-md-10 mx-auto">
                <label>Meeting 1:</label>
                <table class="table table-striped table-sm">
                  <thead>
                    <tr>
                      <th scope="col">Day</th>
                      <th scope="col">Start Time</th>
                      <th scope="col">End Time</th>
                      <th scope="col">Delete</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr class="align-middle course-group" data-group="0">
                      <td><select name="day" id="meeting-table-0-group-0-day">
                          <% if(days != null) {
                        for (let index = 0; index < days.length; index++) {
                          const day = days[index];
                        %>
                          <option>
                            <%= day.name %>
                          </option>

                          <% }}%>
                        </select></td>
                      <td><input type="time" id="meeting-table-0-group-0-day" name="meeting-table-0-group-0-start"></td>
                      <td><input type="time" id="meeting-table-0-group-0-day" name="meeting-table-0-group-0-end"></td>
                      <td><button class="btn btn-outline-danger" type="button" onclick="deleteGroup(this);"><i class="bi bi-x-circle text-danger"></i></button></td>
                    </tr>
                  </tbody>
                </table>
                <div class="row d-flex">
                  <div class="col w-auto d-flex justify-content-center align-items-center text-center">
                    <span class="text-danger col">Error</span>
                  </div>
                  <div class="col-auto w-auto d-flex justify-content-end">
                    <button type="button" class="btn btn-primary">Add Time</button>
                  </div>
                </div>

              </div>
            </div>
            <div class="row" id="meeting-location">
            </div>
            <!-- end of create Grouping -->
            <!-- Add meeting button-->
            <div class="col-md-10 mx-auto mt-5 d-flex justify-content-end">
              <button class="btn btn-info" type="button">Add Meeting</button>
            </div>


            <div class="text-center">
              <button class="btn btn-primary mt-2" type="submit">
                Create Course
              </button>
            </div>
            <!-- Add meeting button-->


            <div class="text-center">
              <p id="message" class="text-danger" style="height:25px">
                <%- locals.message %>
              </p>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</body>

</html>