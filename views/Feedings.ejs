<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Feedings</title>
  <link rel="stylesheet" type="text/css" href="/css/bootstrap.min.css" />
  <link rel="stylesheet" type="text/css" href="/font/bootstrap-icons.css">
  <%- include('partials/favico') %>
  <script>
    // Set the date pickers date to today
    function loadStartDate() {
      let datePicker = document.getElementById("datePicker");
      datePicker.valueAsDate = new Date();
    }

    function addEventListenersToFeedings() {
      // Add event listener to all feedings
      let elements = document.querySelectorAll(".feeding-button");

      // Cannot use a for-in loop for some resons.
      // Assign the event listener to the label for each feeding
      for (let i = 0; i < elements.length; i++) {
        // https://stackoverflow.com/questions/4957207/how-to-check-uncheck-radio-button-on-click
        elements[i].addEventListener("mousedown", function(e) {

          // Since we are getting the label in the event listener we need to get the coresponding input element
          let self = document.getElementById(this.getAttribute("for"));

          // When check trigger
          if (self.checked) {

            // Store the the value in a attribue so we can tell the value in the async code
            // This allows the user to click the button more than once without having to leave the button
            self.setAttribute("data-checked", self.checked);

            let unchecked = function() {
              setTimeout(function() {
                if (self.getAttribute("data-checked") == "true") {
                  self.checked = false;
                  self.setAttribute("data-checked", self.checked);
                }
              }, 0);
            };

            let unbind = function() {
              this.removeEventListener("mouseup", up, true);
              this.removeEventListener("mouseleave", unbind, true);
            };

            let up = function(event) {
              unchecked();
              unbind();
            };

            this.addEventListener("mouseup", up);
            this.addEventListener("mouseleave", unbind);
          }
        }, false);
      }
    }

    // Populate the feading table with the students
    async function loadFeedings() {
      // Store the date
      let date = document.getElementById("datePicker");

      // Store the meal id
      let meal = document.getElementById("mealPicker");

      // If both values are not filled exit
      if (date == null || date == undefined || meal == undefined || meal == null) {
        console.log("Date: " + date);
        console.log("Meal: " + meal);

        return;
      }

      let promiseStudents = new Promise((resolve, reject) => {
        // Create an AJAX request to get the students
        let xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function() {
          if (this.readyState == 4 && this.status == 200) {

            let students = JSON.parse(this.responseText);
            resolve(students);
          }
        };
        xhttp.open("GET", "students", true);
        xhttp.send();
      });

      // For the each student see if they have a current feeding for today
      let promiseFeedings = new Promise((resolve, reject) => {
        // Create an AJAX request to get the students
        let xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function() {
          if (this.readyState == 4 && this.status == 200) {

            let feedings = JSON.parse(this.responseText);
            resolve(feedings);
          }
        };

        // Add the date the the url
        let url = new URL("date", window.location.href);
        let params = new URLSearchParams(url.search);
        params.append("date", date.value);
        url.search = params;

        xhttp.open("GET", url, true);
        xhttp.send();
      });

      // Wait for the students and feeding promise
      // Add a row for each student
      let students;
      let feedings;

      await Promise.all([promiseStudents, promiseFeedings]).then((values) => {
       students = values[0];
       feedings = values[1];
      });

      // Delete all current rows
      let tableBody = document.getElementById("feeding-table-body");
      while (tableBody.firstChild) {
        tableBody.removeChild(tableBody.firstChild);
      }

      // Add the rows
      students.forEach(student => {
        createTableRow(student.student_id, student.first_name, student.last_name, );
      });
    }

    function createTableRow(student_id, first_name, last_name, is_feed) {
      let tr = document.createElement("tr");

      let td_name = document.createElement("td");
      td_name.innerText = first_name + " " + last_name;
      tr.appendChild(td_name);



      let tableBody = document.getElementById("feeding-table-body");
      tableBody.appendChild(tr);
    }
  </script>
</head>

<body onload="loadStartDate(), addEventListenersToFeedings(), loadFeedings()">
  <div class="container-fluid vh-100" style="margin-top:10px">
    <div class="" style="margin-top:100px">
      <div class="rounded d-flex justify-content-center">
        <div class="col-md-8 col-sm-12 shadow-lg p-5 bg-light">
          <%- include('partials/backbutton') %>
          <div style="text-align:center">
            <h1>Feedings</h1>
          </div>
          <div class="row">
            <form action="" method="post" id="form" class="d-flex align-items-center justify-content-center">
              <div class="inline me-1">
                <input type="date" id="datePicker" class="form-control" name="feed-date" min="1970-01-01" max="9999-12-31" onchange="loadFeedings()">
              </div>
              <div class="inline ms-1">
                <select type="select" id="mealPicker" class="form-select" name="meal-time" onchange="loadFeedings()">
                  <%if(locals.meal_times != undefined || locals.meal_times != null) {
                      meal_times.forEach(meal_time => {
                        //https://www.freecodecamp.org/news/javascript-capitalize-first-letter-of-word/
                        const firstLetter = meal_time.time.charAt(0)
                        const firstLetterCap = firstLetter.toUpperCase()
                        const remainingLetters = meal_time.time.slice(1)
                        const capitalizedWord = firstLetterCap + remainingLetters
                      %>
                  <option value="<%=meal_time.meal_time_id%>"><%=capitalizedWord%></option>
                  <%});
                  }%>
                </select>
              </div>
          </div>
          <table class="table table-striped table-hover table-sm">
            <thead>
              <tr>
                <th scope="col">Name</th>
                <th scope="col">
                  <span>Meal</span>
                </th>
              </tr>
            </thead>
            <tbody id="feeding-table-body">
              <%if(locals.students != undefined || locals.students != null) {
                students.forEach(student => {
                      %>
              <tr>
                <td><%=student.first_name%></td>
                <td> <input type="radio" class="btn-check" name="options-outlined-<%=student.student_id%>" id="success-outlined-<%=student.student_id%>" autocomplete="off">
                  <label class="btn btn-outline-success feeding-button" for="success-outlined-<%=student.student_id%>"><i class="bi bi-check-square-fill"></i></label>

                  <input type="radio" class="btn-check" name="options-outlined-<%=student.student_id%>" id="danger-outlined-<%=student.student_id%>" autocomplete="off">
                  <label class="btn btn-outline-danger feeding-button" for="danger-outlined-<%=student.student_id%>"><i class="bi bi-x-square-fill"></i></label>
                </td>
              </tr>
              <%});
                  }%>
            </tbody>
          </table>
          <div class="d-flex justify-content-end align-items-center">
            <div class="d-inline"> <input type="button" value="Cancel" class="btn btn-secondary me-1">
            </div>
            <div class="d-inline"> <input type="submit" value="Save" class="btn btn-primary ms-1">
            </div>
          </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</body>

</html>